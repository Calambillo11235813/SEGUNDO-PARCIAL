import os
import sys
import django
import time
from datetime import datetime

# Configuraci√≥n Django
print("üîÑ Inicializando entorno Django...")
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
sys.path.insert(0, project_root)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.settings')

try:
    django.setup()
    print("‚úÖ Django inicializado correctamente")
except Exception as e:
    print(f"‚ùå Error inicializando Django: {e}")
    sys.exit(1)

# Imports de Django
from django.contrib.contenttypes.models import ContentType
from Cursos.models import Calificacion, EvaluacionEntregable, Trimestre
from django.db import transaction

def main():
    print("\nüóëÔ∏è  ELIMINACI√ìN DE CALIFICACIONES 2024")
    print("====================================")
    
    # Obtener ContentType
    entregable_ct = ContentType.objects.get_for_model(EvaluacionEntregable)
    
    # Obtener trimestres 2024
    trimestres_2024 = Trimestre.objects.filter(nombre__contains='2024').order_by('id')
    if not trimestres_2024.exists():
        print("‚ùå No se encontraron trimestres para el a√±o 2024")
        return
    
    print(f"Trimestres 2024 encontrados: {trimestres_2024.count()}")
    for t in trimestres_2024:
        print(f"- ID: {t.id}, Nombre: {t.nombre}")
    
    # An√°lisis por trimestre
    print("\nüìä AN√ÅLISIS POR TRIMESTRE:")
    print("------------------------")
    total_general = 0
    
    for t in trimestres_2024:
        # Contar evaluaciones
        evaluaciones = EvaluacionEntregable.objects.filter(trimestre=t)
        eval_count = evaluaciones.count()
        
        # Contar calificaciones
        cal_count = Calificacion.objects.filter(
            content_type=entregable_ct,
            object_id__in=evaluaciones.values_list('id', flat=True)
        ).count()
        
        total_general += cal_count
        
        print(f"Trimestre {t.id} ({t.nombre}):")
        print(f"- Evaluaciones: {eval_count}")
        print(f"- Calificaciones: {cal_count}")
    
    print(f"\nüìù RESUMEN:")
    print(f"- Total evaluaciones 2024: {EvaluacionEntregable.objects.filter(trimestre__in=trimestres_2024).count()}")
    print(f"- Total calificaciones 2024: {total_general}")
    
    if total_general == 0:
        print("\n‚ö†Ô∏è No hay calificaciones para eliminar. Operaci√≥n cancelada.")
        return
    
    # Solicitar confirmaci√≥n
    print("\n‚ö†Ô∏è  ADVERTENCIA ‚ö†Ô∏è")
    print("=================")
    print("Esta operaci√≥n eliminar√° TODAS las calificaciones del a√±o 2024.")
    print("Esta acci√≥n es IRREVERSIBLE y podr√≠a afectar a la funcionalidad del sistema.")
    print("Se recomienda hacer una copia de seguridad antes de continuar.")
    
    confirmacion = input("\nEscribe 'ELIMINAR CALIFICACIONES 2024' para confirmar: ")
    
    if confirmacion != "ELIMINAR CALIFICACIONES 2024":
        print("\n‚ùå Operaci√≥n cancelada por el usuario.")
        return
    
    # Registrar hora de inicio
    hora_inicio = datetime.now()
    print(f"\n‚è≥ Iniciando eliminaci√≥n a las {hora_inicio.strftime('%H:%M:%S')}...")
    inicio = time.time()
    
    try:
        with transaction.atomic():
            eliminadas_total = 0
            for t in trimestres_2024:
                print(f"\nüîÑ Procesando {t.nombre}...")
                
                # Obtener IDs de evaluaciones para este trimestre
                eval_ids = EvaluacionEntregable.objects.filter(
                    trimestre=t
                ).values_list('id', flat=True)
                
                # Eliminar calificaciones para estas evaluaciones
                eliminadas = Calificacion.objects.filter(
                    content_type=entregable_ct,
                    object_id__in=eval_ids
                ).delete()[0]
                
                eliminadas_total += eliminadas
                print(f"‚úì {eliminadas:,} calificaciones eliminadas")
            
            tiempo_total = time.time() - inicio
            print(f"\n‚úÖ ELIMINACI√ìN COMPLETADA")
            print("=======================")
            print(f"üìä Total eliminadas: {eliminadas_total:,} calificaciones")
            print(f"‚è±Ô∏è Tiempo total: {tiempo_total:.2f} segundos")
            print(f"üöÄ Velocidad: {eliminadas_total/tiempo_total:.2f} registros/segundo")
            
    except Exception as e:
        print(f"\n‚ùå ERROR DURANTE LA ELIMINACI√ìN")
        print(f"Error: {str(e)}")
        print("‚ùå No se eliminaron calificaciones debido al error.")
        
    # Verificaci√≥n final
    cal_restantes = Calificacion.objects.filter(
        content_type=entregable_ct,
        object_id__in=EvaluacionEntregable.objects.filter(
            trimestre__in=trimestres_2024
        ).values_list('id', flat=True)
    ).count()
    
    print(f"\nüîç Verificaci√≥n final: {cal_restantes:,} calificaciones restantes para 2024")
    
    # Siguiente paso
    print("\nüîÑ PR√ìXIMOS PASOS:")
    print("----------------")
    print("1. Ejecutar el script de importaci√≥n de calificaciones con las correcciones necesarias")
    print("2. Verificar que las calificaciones se hayan importado correctamente")
    print("3. Asegurarse de que las evaluaciones ahora muestren las calificaciones correctas")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Operaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n\n‚ùå Error inesperado: {str(e)}")
    finally:
        print("\nüìå Fin del script")